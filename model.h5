{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"CBLriJsC4OAh"},"outputs":[],"source":["#%matplotlib inline\n","\n","import torch\n","import torchvision\n","import torchvision.transforms as transforms\n","\n","# Define a transform to resize all images to 32x32 pixels\n","transform = transforms.Compose([\n","    transforms.Resize((32, 32)),  # Resize images to 32x32\n","    transforms.ToTensor(),\n","    transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))\n","])\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vQXe9lPy4OAi","executionInfo":{"status":"ok","timestamp":1720849074880,"user_tz":-330,"elapsed":16972,"user":{"displayName":"pavan devareddy","userId":"02473944487135038253"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"9e37d9fb-603d-448c-edf6-c6954b798bd5"},"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading https://sid.erda.dk/public/archives/daaeac0d7ce1152aea9b61d9f1e19370/GTSRB-Training_fixed.zip to data/gtsrb/GTSRB-Training_fixed.zip\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 187490228/187490228 [00:06<00:00, 29698924.22it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Extracting data/gtsrb/GTSRB-Training_fixed.zip to data/gtsrb\n"]}],"source":["trainset = torchvision.datasets.GTSRB(root='./data',split = 'train',\n","                                        download=True, transform=transform)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4qoH1mGZ4OAj"},"outputs":[],"source":["trainloader = torch.utils.data.DataLoader(trainset, batch_size=4,\n","                                          shuffle=True, num_workers=2)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dnt-TcvB4OAj","executionInfo":{"status":"ok","timestamp":1720849084259,"user_tz":-330,"elapsed":1358,"user":{"displayName":"pavan devareddy","userId":"02473944487135038253"}},"outputId":"5d9f3df9-a1d8-4fbb-f106-238d3d0bc33c","colab":{"base_uri":"https://localhost:8080/","height":210}},"outputs":[{"output_type":"stream","name":"stdout","text":["Priority road No passing Priority road Speed limit (50km/h)\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import torch\n","import torchvision\n","\n","\n","\n","def imshow(img):\n","    img = img / 2 + 0.5     # unnormalize\n","    npimg = img.numpy()\n","    plt.imshow(np.transpose(npimg, (1, 2, 0)))\n","\n","classes = ('Speed limit (20km/h)','Speed limit (30km/h)','Speed limit (50km/h)','Speed limit (60km/h)','Speed limit (70km/h)','Speed limit (80km/h)', 'End of speed limit (80km/h)','Speed limit (100km/h)','Speed limit (120km/h)','No passing','No passing for vehicles over 3.5 metric tons','Right-of-way at the next intersection','Priority road','Yield','Stop','No vehicles','Vehicles over 3.5 metric tons prohibited','No entry','General caution','Dangerous')\n","\n","# get some random training images\n","dataiter = iter(trainloader)\n","images, labels = next(dataiter)\n","\n","\n","# Removed the check for resizable tensors as the attribute is not available in older PyTorch versions.\n","\n","\n","# show images (if no errors above)\n","imshow(torchvision.utils.make_grid(images))\n","\n","# Convert the labels tensor to a list of Python integers\n","label_indices = labels.tolist()\n","\n","# Ensure label indices are within the valid range\n","# The GTSRB dataset has 43 classes, so valid indices are 0 to 42.\n","valid_label_indices = [i for i in label_indices if 0 <= i < len(classes)]\n","\n","# print labels, ensuring index is within range\n","print(' '.join('%5s' % classes[j] for j in valid_label_indices))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"iNeitbjz4OAk"},"outputs":[],"source":["#%matplotlib inline\n","\n","import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import torch.optim as optim\n","\n","import torchvision\n","import torchvision.transforms as transforms\n","\n","import matplotlib\n","import matplotlib.pyplot as plt\n","import numpy as np"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"eivuIDlU4OAk","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1720849111020,"user_tz":-330,"elapsed":19104,"user":{"displayName":"pavan devareddy","userId":"02473944487135038253"}},"outputId":"024cf064-f5d8-4e39-c5da-e8bd7d51cc5e"},"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading https://sid.erda.dk/public/archives/daaeac0d7ce1152aea9b61d9f1e19370/GTSRB_Final_Test_Images.zip to data/gtsrb/GTSRB_Final_Test_Images.zip\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 88978620/88978620 [00:12<00:00, 7124040.73it/s] \n"]},{"output_type":"stream","name":"stdout","text":["Extracting data/gtsrb/GTSRB_Final_Test_Images.zip to data/gtsrb\n","Downloading https://sid.erda.dk/public/archives/daaeac0d7ce1152aea9b61d9f1e19370/GTSRB_Final_Test_GT.zip to data/gtsrb/GTSRB_Final_Test_GT.zip\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 99620/99620 [00:00<00:00, 301004.19it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Extracting data/gtsrb/GTSRB_Final_Test_GT.zip to data/gtsrb\n"]}],"source":["transform = transforms.Compose(\n","    [transforms.ToTensor(),\n","     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])\n","\n","trainset = torchvision.datasets.GTSRB(root='./data',split='train',\n","                                        download=True, transform=transform)\n","trainloader = torch.utils.data.DataLoader(trainset, batch_size=4,\n","                                          shuffle=True, num_workers=2)\n","\n","testset = torchvision.datasets.GTSRB(root='./data',split='test',\n","                                       download=True, transform=transform)\n","testloader = torch.utils.data.DataLoader(testset, batch_size=4,\n","                                         shuffle=False, num_workers=2)\n","\n","classes = ('Speed limit (20km/h)','Speed limit (30km/h)','Speed limit (50km/h)','Speed limit (60km/h)','Speed limit (70km/h)','Speed limit (80km/h)', 'End of speed limit (80km/h)','Speed limit (100km/h)','Speed limit (120km/h)','No passing','No passing for vehicles over 3.5 metric tons','Right-of-way at the next intersection','Priority road','Yield','Stop','No vehicles','Vehicles over 3.5 metric tons prohibited','No entry','General caution','Dangerous')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"H5dMlGF64OAl","executionInfo":{"status":"ok","timestamp":1720849123544,"user_tz":-330,"elapsed":1277,"user":{"displayName":"pavan devareddy","userId":"02473944487135038253"}},"outputId":"96240a72-de78-4d65-a280-a6e3330585e5","colab":{"base_uri":"https://localhost:8080/","height":210}},"outputs":[{"output_type":"stream","name":"stdout","text":["No passing Speed limit (100km/h) General caution\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["import matplotlib.pyplot as plt\n","import numpy as np\n","import torch\n","import torchvision\n","from torchvision import transforms\n","\n","classes = ('Speed limit (20km/h)','Speed limit (30km/h)','Speed limit (50km/h)','Speed limit (60km/h)','Speed limit (70km/h)','Speed limit (80km/h)', 'End of speed limit (80km/h)','Speed limit (100km/h)','Speed limit (120km/h)','No passing','No passing for vehicles over 3.5 metric tons','Right-of-way at the next intersection','Priority road','Yield','Stop','No vehicles','Vehicles over 3.5 metric tons prohibited','No entry','General caution','Dangerous')\n","\n","def imshow(img):\n","    img = img / 2 + 0.5     # unnormalize\n","    npimg = img.numpy()\n","    plt.imshow(np.transpose(npimg, (1, 2, 0)))\n","\n","# Modify the transform to resize images to a consistent size\n","transform = transforms.Compose(\n","    [transforms.Resize((32, 32)),  # Resize all images to 32x32 pixels\n","     transforms.ToTensor(),\n","     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])\n","\n","# Recreate the dataloaders with the modified transform\n","trainset = torchvision.datasets.GTSRB(root='./data',split='train',\n","                                        download=True, transform=transform)\n","trainloader = torch.utils.data.DataLoader(trainset, batch_size=4,\n","                                          shuffle=True, num_workers=2)\n","testset = torchvision.datasets.GTSRB(root='./data',split='test',\n","                                       download=True, transform=transform)\n","testloader = torch.utils.data.DataLoader(testset, batch_size=4,\n","                                         shuffle=False, num_workers=2)\n","\n","\n","# get some random training images\n","dataiter = iter(trainloader)\n","images, labels = next(dataiter)\n","\n","# Removed the check for resizable tensors as the attribute is not available in older PyTorch versions.\n","#for i in range(len(images)):\n","#   print(f\"Image {i+1} shape: {images[i].shape}\")\n","\n","# show images (if no errors above)\n","imshow(torchvision.utils.make_grid(images))\n","\n","# Convert the labels tensor to a list of Python integers\n","label_indices = labels.tolist()\n","\n","# Ensure label indices are within the valid range\n","# The GTSRB dataset has 43 classes, so valid indices are 0 to 42.\n","valid_label_indices = [i for i in label_indices if 0 <= i < len(classes)]\n","\n","# print labels, ensuring index is within range\n","print(' '.join('%5s' % classes[j] for j in valid_label_indices))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_8Do70x_4OAl"},"outputs":[],"source":["import torch.nn as nn\n","import torch.nn.functional as F\n","\n","class Net(nn.Module):\n","    def __init__(self):\n","        super(Net, self).__init__()\n","        self.conv1 = nn.Conv2d(3, 6, 5)\n","        self.pool = nn.MaxPool2d(2, 2)\n","        self.conv2 = nn.Conv2d(6, 16, 5)\n","        self.fc1 = nn.Linear(16 * 5 * 5, 120)\n","        self.fc2 = nn.Linear(120, 84)\n","        # Output layer now has 20 classes\n","        self.fc3 = nn.Linear(84, 20)\n","\n","    def forward(self, x):\n","        x = self.pool(F.relu(self.conv1(x)))\n","        x = self.pool(F.relu(self.conv2(x)))\n","        x = x.view(-1, 16 * 5 * 5)\n","        x = F.relu(self.fc1(x))\n","        x = F.relu(self.fc2(x))\n","        x = self.fc3(x)\n","        return x\n","\n","\n","# Instantiate the Net class without any arguments\n","net = Net()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cOhP_61W4OAm"},"outputs":[],"source":["criterion = nn.CrossEntropyLoss()\n","optimizer = optim.SGD(net.parameters(), lr=0.001, momentum=0.9)"]},{"cell_type":"code","execution_count":15,"metadata":{"id":"F2P5Tgzz4OAu","executionInfo":{"status":"ok","timestamp":1720859793056,"user_tz":-330,"elapsed":184314,"user":{"displayName":"pavan devareddy","userId":"02473944487135038253"}},"outputId":"d1051abc-9afe-4828-c4de-237941b47070","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"stream","name":"stdout","text":["[1,  2000] loss: 0.186\n","[1,  4000] loss: 0.173\n","[1,  6000] loss: 0.151\n","[2,  2000] loss: 0.114\n","[2,  4000] loss: 0.095\n","[2,  6000] loss: 0.117\n","[3,  2000] loss: 0.058\n","[3,  4000] loss: 0.090\n","[3,  6000] loss: 0.071\n","Finished Training\n"]}],"source":["for epoch in range(3):  # loop over the dataset multiple times\n","\n","    running_loss = 0.0\n","    for i, data in enumerate(trainloader, 0):\n","        # get the inputs\n","        inputs, labels = data\n","        outputs = net(inputs)\n","        # Ensure labels are within the valid range [0, num_classes-1]\n","        labels = labels % 20\n","\n","        # zero the parameter gradients\n","        optimizer.zero_grad()\n","        loss = criterion(outputs, labels)\n","        loss.backward()\n","        optimizer.step()\n","\n","        # print statistics\n","        running_loss += loss.item()\n","        if i % 2000 == 1999:    # print every 2000 mini-batches\n","            print('[%d, %5d] loss: %.3f' %\n","                  (epoch + 1, i + 1, running_loss / 2000))\n","            running_loss = 0.0\n","\n","print('Finished Training')"]},{"cell_type":"code","execution_count":17,"metadata":{"id":"vAphdQlH4OAv","outputId":"88fd14a2-9887-4b57-9529-f434624890bc","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1720859957950,"user_tz":-330,"elapsed":35671,"user":{"displayName":"pavan devareddy","userId":"02473944487135038253"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: torchvision in /usr/local/lib/python3.10/dist-packages (0.18.0+cu121)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from torchvision) (1.25.2)\n","Requirement already satisfied: torch==2.3.0 in /usr/local/lib/python3.10/dist-packages (from torchvision) (2.3.0+cu121)\n","Requirement already satisfied: pillow!=8.3.*,>=5.3.0 in /usr/local/lib/python3.10/dist-packages (from torchvision) (9.4.0)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from torch==2.3.0->torchvision) (3.15.4)\n","Requirement already satisfied: typing-extensions>=4.8.0 in /usr/local/lib/python3.10/dist-packages (from torch==2.3.0->torchvision) (4.12.2)\n","Requirement already satisfied: sympy in /usr/local/lib/python3.10/dist-packages (from torch==2.3.0->torchvision) (1.13.0)\n","Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from torch==2.3.0->torchvision) (3.3)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch==2.3.0->torchvision) (3.1.4)\n","Requirement already satisfied: fsspec in /usr/local/lib/python3.10/dist-packages (from torch==2.3.0->torchvision) (2023.6.0)\n","Requirement already satisfied: nvidia-cuda-nvrtc-cu12==12.1.105 in /usr/local/lib/python3.10/dist-packages (from torch==2.3.0->torchvision) (12.1.105)\n","Requirement already satisfied: nvidia-cuda-runtime-cu12==12.1.105 in /usr/local/lib/python3.10/dist-packages (from torch==2.3.0->torchvision) (12.1.105)\n","Requirement already satisfied: nvidia-cuda-cupti-cu12==12.1.105 in /usr/local/lib/python3.10/dist-packages (from torch==2.3.0->torchvision) (12.1.105)\n","Requirement already satisfied: nvidia-cudnn-cu12==8.9.2.26 in /usr/local/lib/python3.10/dist-packages (from torch==2.3.0->torchvision) (8.9.2.26)\n","Requirement already satisfied: nvidia-cublas-cu12==12.1.3.1 in /usr/local/lib/python3.10/dist-packages (from torch==2.3.0->torchvision) (12.1.3.1)\n","Requirement already satisfied: nvidia-cufft-cu12==11.0.2.54 in /usr/local/lib/python3.10/dist-packages (from torch==2.3.0->torchvision) (11.0.2.54)\n","Requirement already satisfied: nvidia-curand-cu12==10.3.2.106 in /usr/local/lib/python3.10/dist-packages (from torch==2.3.0->torchvision) (10.3.2.106)\n","Requirement already satisfied: nvidia-cusolver-cu12==11.4.5.107 in /usr/local/lib/python3.10/dist-packages (from torch==2.3.0->torchvision) (11.4.5.107)\n","Requirement already satisfied: nvidia-cusparse-cu12==12.1.0.106 in /usr/local/lib/python3.10/dist-packages (from torch==2.3.0->torchvision) (12.1.0.106)\n","Requirement already satisfied: nvidia-nccl-cu12==2.20.5 in /usr/local/lib/python3.10/dist-packages (from torch==2.3.0->torchvision) (2.20.5)\n","Requirement already satisfied: nvidia-nvtx-cu12==12.1.105 in /usr/local/lib/python3.10/dist-packages (from torch==2.3.0->torchvision) (12.1.105)\n","Requirement already satisfied: triton==2.3.0 in /usr/local/lib/python3.10/dist-packages (from torch==2.3.0->torchvision) (2.3.0)\n","Requirement already satisfied: nvidia-nvjitlink-cu12 in /usr/local/lib/python3.10/dist-packages (from nvidia-cusolver-cu12==11.4.5.107->torch==2.3.0->torchvision) (12.5.82)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->torch==2.3.0->torchvision) (2.1.5)\n","Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from sympy->torch==2.3.0->torchvision) (1.3.0)\n","Accuracy of the network on the 10000 test images: 62 %\n"]}],"source":["!pip install torchvision\n","\n","import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","from torch.utils.data import DataLoader\n","import torchvision.transforms as transforms\n","\n","\n","correct = 0\n","total = 0\n","with torch.no_grad():\n","    for data in testloader:\n","        images, labels = data\n","        outputs = net(images)\n","        _, predicted = torch.max(outputs.data, 1)\n","        total += labels.size(0)\n","        # Convert predicted and labels to have the same dtype before comparison\n","        correct += (predicted.to(labels.dtype) == labels).sum().item()\n","print('Accuracy of the network on the 10000 test images: %d %%' % (\n","    100 * correct / total))"]},{"cell_type":"markdown","metadata":{"id":"EVFD5Qq04OAv"},"source":["If you followed along, you should see that the model is roughly 50%\n","accurate at this point. That's not exactly state-of-the-art, but it's\n","far better than the 10% accuracy we'd expect from a random output. This\n","demonstrates that some general learning did happen in the model.\n"]}],"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.14"},"colab":{"provenance":[{"file_id":"https://github.com/pytorch/tutorials/blob/gh-pages/_downloads/3195443a0ced3cabc0ad643537bdb5cd/introyt1_tutorial.ipynb","timestamp":1719712375992}],"toc_visible":true}},"nbformat":4,"nbformat_minor":0}
